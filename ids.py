# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dI3DJHF2i8Kyj7r9Tm3bld3pLVfACXU3

# **Importing Libraries**
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, ConfusionMatrixDisplay, f1_score
from sklearn import tree
import joblib
from sklearn.tree import export_graphviz
from six import StringIO
from IPython.display import Image
import pydotplus
from matplotlib import pyplot as plt

"""# **Importing the dataset**"""

ds = pd.read_csv('Cryotherapy.csv')

ds.head(150)

ds_copy = ds.copy()

"""# **Description of the dataset**"""

description=ds_copy.describe()
description.head()

"""# **Plotting Frequency Distribution of all the attributes**"""

df1 = ds_copy['Result_of_Treatment'].value_counts()
X_sex = []
Y_sex = []
for key, value in df1.to_dict().items():
    X_sex.append(f"{key}")
    Y_sex.append(value)
plt.bar(X_sex, Y_sex, width=0.3)
plt.xlabel("Class")
plt.ylabel("Count in Dataset")
plt.title("Class Distribution in the dataset")
plt.show()

plt.hist(ds_copy['age'])
plt.ylabel('Frequency count')
plt.xlabel('Age');
plt.title('Frequency Distribution of attribute "Age"')
plt.show()

plt.hist(ds_copy['Time'])
plt.ylabel('Frequency count')
plt.xlabel('Time of treatment(in days)');
plt.title('Frequency Distribution of attribute "Time"')
plt.show()

df1 = ds_copy['Number_of_Warts'].value_counts()
X_age = []
Y_age = []
for key, value in df1.to_dict().items():
    X_age.append(key)
    Y_age.append(value)
plt.bar(X_age, Y_age)
plt.xlabel("Nuber of Warts")
plt.ylabel("Count in Dataset")
plt.title("Frequency Distribution of Number of Warts in a person")
plt.show()

df1 = ds_copy['Type'].value_counts()
X_Age = []
Y_Age = []
temp = []
df1_dict = df1.to_dict()
for i in sorted(df1_dict.keys()):
  temp.append(i)
for key in temp:
    X_Age.append(key)
    Y_Age.append(df1_dict[key])
plt.bar(X_Age, Y_Age)
plt.xlabel("Type")
plt.ylabel("Count in Dataset")
plt.title("Frequency Distribution of type of warts in a person")
plt.show()

plt.hist(ds_copy['Area'])
plt.ylabel('Frequency count')
plt.xlabel('Area');
plt.title('Frequency Distribution of attribute "Area"')
plt.show()

"""# **Extracting Attributes and target classes**"""

X_full = ds.values[:, 0:6]
Y_full = ds.values[:, 6:7]

"""# **Generating datasets by bootstrap method**"""

def generateDataset(i):
  df1 = ds.sample(n=len(ds), axis='rows', replace=True)
  df1_X = df1.copy()
  df1_res = df1_X.pop("Result_of_Treatment")
  df1_sample = df1_X.sample(n=4, axis='columns')
  df1_sample["Result_of_Treatment"] = df1_res
  df1_sample.to_csv(f'Data_Sample_{i}.csv', header=True, index=False)
  print(f"Data_Sample_{i} saved")

"""# **Printing instances of all the generated datasets**"""

data = pd.read_csv(f'Data_Sample_1.csv')
data.head(len(data))

data = pd.read_csv(f'Data_Sample_{2}.csv')
data.head(len(data))

data = pd.read_csv(f'Data_Sample_{3}.csv')
data.head(len(data))

data = pd.read_csv(f'Data_Sample_{4}.csv')
data.head(len(data))

data = pd.read_csv(f'Data_Sample_{5}.csv')
data.head(len(data))

data = pd.read_csv(f'Data_Sample_{6}.csv')
data.head(len(data))

"""# **Training the classifiers, testing them and finding out the accuracy**"""

def trainDT(i, X_train, Y_train, X_test, Y_test, atr_list):
  clf = DecisionTreeClassifier(criterion='entropy', max_depth=10, min_samples_leaf=5)
  clf = clf.fit(X_train,Y_train)
  Y_pred = clf.predict(X_test)
  print(f"Accuracy score for Dataset numbered {i} is {accuracy_score(Y_test, Y_pred)*100}%")
  joblib.dump(clf, f"dc{i}.pkl")
  print(f"dc{i} model saved")
  dot_data = StringIO()
  export_graphviz(clf, out_file=dot_data,
                  filled=True, rounded=True,
                  special_characters=True, feature_names=atr_list, class_names=['No','Yes'])
  graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
  graph.write_png(f'dc{i}.png')
  Image(graph.create_png())
  print(f"dc{i} visual saved\n")

for i in range(0, 6):
  dataset_temp = pd.read_csv(f'Data_Sample_{i+1}.csv')
  atr_list = []
  for col in dataset_temp.columns:
    atr_list.append(col)
  atr_list.pop()
  X = dataset_temp.values[:, 0:4]
  Y = dataset_temp.values[:, 4:5]
  X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=1)
  trainDT(i+1, X_train, Y_train, X_test, Y_test, atr_list)

"""# **Using all 6 classifiers to make a prediction model using Bagging**"""

def predictSingle(X):
  result0 = 0
  result1 = 0
  X = [[X[0], X[2], X[5], X[3]],
          [X[2], X[3], X[0], X[4]],
          [X[0], X[3], X[5], X[1]],
          [X[1], X[2], X[5], X[0]],
          [X[3], X[2], X[0], X[1]],
          [X[1], X[3], X[5], X[4]]]
  for i in range(0, 6):
    clf = joblib.load(f'dc{i+1}.pkl')
    Y = clf.predict([X[i]])
    Y = Y[0]
    if Y == 0:
      result0 += 1
    else:
      result1 += 1
  if result0 > result1:
    return 0
  else:
    return 1

print(predictSingle([1, 67, 10, 7, 1, 42]))

"""# **Finding out Accuracy, precision, recall and F-1 score of the final model**"""

Y_pred = []
for x in X_full:
  Y_pred.append(predictSingle(x))

print(f'Accuracy of the model is {accuracy_score(Y_full, np.array(Y_pred))}')
print(f'Precision of the model is {precision_score(Y_full, np.array(Y_pred))}')
print(f'Recall of the model is {recall_score(Y_full, np.array(Y_pred))}')
print(f'F1-Score of the model is {f1_score(Y_full, np.array(Y_pred))}')

"""# **Generating and printing the confusion matrix**"""

cm = confusion_matrix(Y_full,np.array(Y_pred))
cm

cm_display = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = [False, True])
cm_display.plot()
plt.show()